{"name":"Cast Heal Spell","permission":{"default":0,"2FHUfmxigXEfscQX":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.HEpngp1gqNb4kd1O"}},"scope":"global","command":"let healDie=\"d10\"\nlet healBonus=8\n\n\nlet toChat = (content, rollString) => {\n    let chatData = {\n        user: game.user.id,\n        content,\n        speaker: ChatMessage.getSpeaker(),\n    }\n    // ChatMessage.create(chatData, {})\n    if (rollString) {\n        let roll = new Roll(rollString).roll();\n        chatData = {\n            speaker: ChatMessage.getSpeaker(),\n            user: game.user.id,\n            flavor: content,\n            type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n            roll\n          }\n        ChatMessage.create(chatData, {})\n    }\n    \n}\n//rollHealSpell(spellLevel, spellAction, name});\n\nlet rollHealSpell = (args) => {\n    let {spellLevel, spellAction, name} = args;\n    const roll = new Roll(spellLevel+healDie).roll().total;\n\n    let message = `${name} casts ${spellAction} action, rolling ${spellLevel}${healDie} and healing `;\n    \n    if (spellAction == 1) {\n        if (game.user.targets.size !== 1)\n        {\n            ui.notifications.warn(`Please target one token.`);\n            return\n        }\n        let targetActor = game.user.targets.values().next().value.actor;\n        toChat(`${message} ${roll} to ${targetActor.name}.`, `${roll}`);\n    } \n    if (spellAction == 2) {\n        if (game.user.targets.size !== 1)\n        {\n            ui.notifications.warn(`Please target one token.`);\n            return\n        }\n        let targetActor = game.user.targets.values().next().value.actor;\n        let totalHealBonus=healBonus*spellLevel\n        toChat(`${message} ${roll}+${totalHealBonus} to ${targetActor.name}`, `${roll}+${totalHealBonus}`);\n    }\n    if (spellAction == 3) {\n        toChat(`${message} ${roll} to all living creatures and damaging all undead creatures within 30 feet (basic fortitude save).`, `${roll}`);\n    }\n}\n\n\nlet applyChanges = false;\nnew Dialog({\n  title: `Cast Heal`,\n  content: `\n    <div>Select the number of actions and spell level of heal. Remember to update your spellbook to reflect that you used the heal spell.<br><br><strong>Heal die:</strong> ${healDie} (incorrect? edit this macro to change the value)<div>\n    <hr/>\n    <form>\n      <div class=\"form-group\">\n        <label>Number of Actions:</label>\n        <select id=\"dc-type\" name=\"dc-type\">\n          <option value=\"1\">1 action heal</option>\n          <option value=\"2\">2 Action Heal</option>\n          <option value=\"3\">3 Action Heal</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Spell Level:</label>\n        <input id=\"spellLevel\" name=\"spellLevel\" type=\"number\" value=\"1\"/>\n      </div>  \n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Cast Heal`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      for ( let token of canvas.tokens.controlled ) {\n        const {name} = token;\n        let spellAction = html.find('[name=\"dc-type\"]')[0].value || \"trained\";\n        let spellLevel = parseInt(html.find('[name=\"spellLevel\"]')[0].value) || 1;\n        return rollHealSpell({spellLevel: spellLevel, spellAction: spellAction, name});\n      }\n    }\n  }\n}).render(true);","author":"2FHUfmxigXEfscQX","img":"modules/zachros/icons/heart.svg","actorIds":[],"_id":"1HvX5gy1fDfegKbE"}
{"name":"Treat Wounds/Battle Medicine","permission":{"default":0,"2FHUfmxigXEfscQX":3},"type":"script","flags":{"core":{"sourceId":"Macro.ikygH2KShl0nlfV3"}},"scope":"global","command":"const healHurtMessage = async ({value, healer, target}) => {\n  const hitpoints = game.i18n.localize('PF2E.HitPointsHeader').toLowerCase();\n  const appliedResult =\n      value > 0\n          ? game.i18n.localize('PF2E.UI.applyDamage.damaged') + value\n          : game.i18n.localize('PF2E.UI.applyDamage.healed') + value * -1;  \n  const by = game.i18n.localize('PF2E.UI.applyDamage.by');\n  const message = `\n    <div class=\"dice-roll\">\n    <div class=\"dice-result\">\n      <div class=\"dice-total\" style=\"padding: 0 10px; word-break: normal;\">\n        <span style=\"font-size: 12px; font-style:oblique; font-weight: 400; line-height: 15px;\">\n          ${target} ${appliedResult} ${hitpoints} ${by} ${healer}.\n        </span>\n      </div>\n    </div>\n    </div>\n    `;  \n  ChatMessage.create({\n    user: healer,\n    type: CHAT_MESSAGE_TYPES.OTHER,\n    content: message,\n    speaker: ChatMessage.getSpeaker()\n  }, { });     \n}\n\nconst rollTreatWounds = async ({DC, bonus, med, name, isBattleMedicine, autoApply}) => {\n  const checkRoll = new Roll(`1d20 + ${med.value}`).roll();\n  const healType = isBattleMedicine ? \"Battle Medicine\" : \"Treat Wounds\";\n  const medicine = game.i18n.localize('PF2E.SkillMed');\n  const DCLabel = game.i18n.localize('PF2E.DCLabel');\n  ChatMessage.create({\n    user: game.user.id,\n    type: CHAT_MESSAGE_TYPES.ROLL,\n    roll: checkRoll,\n    flavor: `<strong>${healType}: ${medicine}</strong> (${DCLabel} ${DC})`,\n    speaker: ChatMessage.getSpeaker()\n  });\n  \n  const baseRoll = checkRoll.dice[0].total;\n  let godlessHealing, targetName, regularHealing;\n  let targetHasGodless=false;\n  const crit = baseRoll === 1  ?\n                 -1 :\n               baseRoll === 20 ?\n                 1 : 0;\n  const success = checkRoll.total >= DC + 10 ?\n                    2 :\n                  checkRoll.total >= DC      ?\n                    1 :\n                  checkRoll.total <= DC - 10 ?\n                   -1 : 0;\n\n  let healFormula, successLabel;\n  const bonusString = bonus > 0 ? `+ ${bonus}` : \"\";\n  if (success + crit > 1) {\n    healFormula = `4d8${bonusString}`;\n    successLabel = game.i18n.localize('PF2E.CheckOutcome.criticalSuccess');\n  } else if (success + crit === 1) {\n    healFormula = `2d8${bonusString}`;\n    successLabel = game.i18n.localize('PF2E.CheckOutcome.success');\n  } else if (success + crit < 0 || success == -1) {\n    healFormula = \"1d8\";\n    successLabel = game.i18n.localize('PF2E.CheckOutcome.criticalFailure');\n  }\n\n  if (healFormula !== undefined) {\n    const healRoll = new Roll(healFormula).roll();\n    const rollType = success > 0 ? \"Healing\" : \"Damage\";\n    game.user.targets.forEach(t => {\n      targetName=t.actor.data.name;\n      t.actor.data.items.forEach(i => {\n        targetHasGodless=false\n        if (i.name == \"Godless Healing\")\n          targetHasGodless=true\n      })\n      if (targetHasGodless == true)\n        if (godlessHealing === undefined)\n          godlessHealing=targetName;\n        else\n          godlessHealing=godlessHealing+\", \"+targetName;\n      else\n        if (regularHealing === undefined)\n          regularHealing=targetName;\n        else\n          regularHealing=regularHealing+\", \"+targetName;     \n    })\n    if (!autoApply)\n    {\n      ChatMessage.create({\n        user: game.user.id,\n        type: CHAT_MESSAGE_TYPES.ROLL,\n        flavor: `<strong>${rollType} Roll: ${healType} on ${regularHealing}</strong> (${successLabel})`,\n        roll: healRoll,\n        speaker: ChatMessage.getSpeaker()\n      }, { });   \n      if (godlessHealing && rollType===\"Healing\") {\n        let godlessHealRoll=healRoll\n        godlessHealRoll._formula=godlessHealRoll._formula+\"+5\"\n        godlessHealRoll.results[0]=parseInt(godlessHealRoll.results[0])+5\n        godlessHealRoll._total=parseInt(godlessHealRoll._total)+5\n        ChatMessage.create({\n          user: game.user.id,\n          type: CHAT_MESSAGE_TYPES.ROLL,\n          flavor: `<strong>${rollType} Roll: ${healType} with Godless Healing on ${godlessHealing}</strong> on (${successLabel})`,\n          roll: godlessHealRoll,\n          speaker: ChatMessage.getSpeaker()\n        }, { }); \n      }        \n    } else {\n      ChatMessage.create({\n        user: game.user.id,\n        type: CHAT_MESSAGE_TYPES.ROLL,\n        flavor: `<strong>${rollType} Roll: ${healType} on ${regularHealing}</strong> (${successLabel})`,\n        roll: healRoll,\n        speaker: ChatMessage.getSpeaker()\n      }, { });      \n      game.user.targets.forEach(t => {\n        targetName=t.actor.data.name;\n        t.actor.data.items.forEach(i => {\n          targetHasGodless=false\n          if (i.name == \"Godless Healing\")\n            targetHasGodless=true\n        })\n        if (autoApply)\n        {\n          if (rollType==\"Healing\")\n          {\n            if (targetHasGodless == true) {\n              let totalHealed=healRoll._total+5\n              t.actor.modifyTokenAttribute(\"attributes.hp\", totalHealed, true, false);\n              healHurtMessage({value: totalHealed*-1,  healer: name,  target: targetName});\n            } else {\n              t.actor.modifyTokenAttribute(\"attributes.hp\", healRoll._total, true, false);\n              healHurtMessage({value: healRoll._total*-1,  healer: name,  target: targetName});\n            }\n          } else {\n            t.actor.modifyTokenAttribute(\"attributes.hp\", healRoll._total * -1, true, true);\n            healHurtMessage({value: healRoll._total,  healer: name,  target: targetName});\n          }\n        }\n      })            \n    }\n  }\n};\n\n\nconst applyChanges = ($html) => {\n  for (const token of canvas.tokens.controlled) {\n    const {med} = token.actor.data.data.skills;\n    const {name} = token;\n    const isBattleMedicine = $html.find('[name=\"battleMed\"]').is(':checked');\n    const autoApply = $html.find('[name=\"autoApply\"]').is(':checked');\n    const mod = parseInt($html.find('[name=\"modifier\"]').val()) || 0;\n    const requestedProf = parseInt($html.find('[name=\"dc-type\"]')[0].value) || 1;\n    const usedProf = requestedProf <= med.rank ? requestedProf : med.rank;\n    const roll = [\n      () => ui.notifications.warn(`${name} is not trained in Medicine and doesn't know how to treat wounds.`),\n      () => rollTreatWounds({DC: 15 + mod, bonus: 0, med, name, isBattleMedicine, autoApply}),\n      () => rollTreatWounds({DC: 20 + mod, bonus: 10, med, name, isBattleMedicine, autoApply}),\n      () => rollTreatWounds({DC: 30 + mod, bonus: 30, med, name, isBattleMedicine, autoApply}),\n      () => rollTreatWounds({DC: 40 + mod, bonus: 50, med, name, isBattleMedicine, autoApply})\n    ][usedProf];\n\n    roll();\n  }\n};\n\nif (token === undefined) {\n  ui.notifications.warn(game.i18n.localize('PF2E.UI.errorSelectToken'));\n} else if (Array.from(game.user.targets).length < 1) {\n  errorTargetToken\n  ui.notifications.warn(game.i18n.localize('PF2E.UI.errorTargetToken'));\n} else {\n  const medicine = game.i18n.localize('PF2E.SkillMed');\n  const DCLabel = game.i18n.localize('PF2E.DCLabel');  \n  const healing = game.i18n.localize('PF2E.TraitHealing');  \n  \n  const dialog = new Dialog({\n    title: \"Treat Wounds\",\n    content: `\n<div>Select a target DC. Remember that you can't attempt a heal above your proficiency. Attempting to do so will downgrade the DC and amount healed to the highest you're capable of.</div>\n<hr/>\n<form>\n<div class=\"form-group\">\n<label>${medicine} ${DCLabel}:</label>\n<select id=\"dc-type\" name=\"dc-type\">\n<option value=\"1\">${game.i18n.localize('PF2E.ProficiencyLevel1')} ${DCLabel} 15</option>\n<option value=\"2\">${game.i18n.localize('PF2E.ProficiencyLevel2')} ${DCLabel} 20, +10 ${healing}</option>\n<option value=\"3\">${game.i18n.localize('PF2E.ProficiencyLevel3')} ${DCLabel} 30, +30 ${healing}</option>\n<option value=\"4\">${game.i18n.localize('PF2E.ProficiencyLevel4')} ${DCLabel} 40, +50 ${healing}</option>\n</select>\n</div>\n<div class=\"form-group\">\n<label>${DCLabel} ${game.i18n.localize('ModifierTitle')}:</label>\n<input id=\"modifier\" name=\"modifier\" type=\"number\"/>\n</div>\n<div class=\"form-group\">\n<label>Is Battle Medicine?</label>\n<input id=\"battleMed\" name=\"battleMed\" type=\"checkbox\"/>\n</div>\n<div class=\"form-group\">\n<label>Automatically apply to selected targets?</label>\n<input id=\"autoApply\" name=\"autoApply\" type=\"checkbox\"/>\n</div>\n</form>\n`,\n    buttons: {\n      yes: {\n        icon: `<i class=\"fas fa-hand-holding-medical\"></i>`,\n        label: \"Treat Wounds\",\n        callback: applyChanges\n      },\n      no: {\n        icon: `<i class=\"fas fa-times\"></i>`,\n        label: \"Cancel\"\n      },\n    },\n    default: \"yes\"\n  });\n  dialog.render(true);\n}","author":"2FHUfmxigXEfscQX","img":"modules/zachros/icons/bandage.svg","actorIds":[],"_id":"8czJxIuiRxlLx7QK"}
{"name":"Show Token Art","permission":{"default":0,"2FHUfmxigXEfscQX":3},"type":"script","flags":{"core":{"sourceId":"Macro.u1uaZdoXwusPmAz4"}},"scope":"global","command":"if (token === undefined) {\n  ui.notifications.warn(\"Please select token first.\");\n} else {\n  let tActor = token.actor;\n  let ip = new ImagePopout(tActor.data.img, {\n    title: tActor.name,\n    shareable: true,\n    uuid: tActor.uuid\n  }).render(true);\n  ip.shareImage();\n}","author":"2FHUfmxigXEfscQX","img":"modules/zachros/icons/zoom.svg","actorIds":[],"_id":"paHHaJgyzXjb5rwU"}
{"_id":"8czJxIuiRxlLx7QK","name":"Treat Wounds/Battle Medicine","permission":{"default":0,"2FHUfmxigXEfscQX":3},"type":"script","flags":{"core":{"sourceId":"Macro.ikygH2KShl0nlfV3"}},"scope":"global","command":"const healHurtMessage = async ({value, healer, target}) => {\n  const hitpoints = game.i18n.localize('PF2E.HitPointsHeader').toLowerCase();\n  const appliedResult =\n      value > 0\n          ? game.i18n.localize('PF2E.UI.applyDamage.damaged') + value\n          : game.i18n.localize('PF2E.UI.applyDamage.healed') + value * -1;  \n  const by = game.i18n.localize('PF2E.UI.applyDamage.by');\n  const message = `\n    <div class=\"dice-roll\">\n    <div class=\"dice-result\">\n      <div class=\"dice-total\" style=\"padding: 0 10px; word-break: normal;\">\n        <span style=\"font-size: 12px; font-style:oblique; font-weight: 400; line-height: 15px;\">\n          ${target} ${appliedResult} ${hitpoints} ${by} ${healer}.\n        </span>\n      </div>\n    </div>\n    </div>\n    `;  \n  ChatMessage.create({\n    user: healer,\n    type: CHAT_MESSAGE_TYPES.OTHER,\n    content: message,\n    speaker: ChatMessage.getSpeaker()\n  }, { });     \n}\n\nconst rollTreatWounds = async ({DC, bonus, med, name, isBattleMedicine, autoApply}) => {\n  const checkRoll = new Roll(`1d20 + ${med.value}`).roll();\n  const healType = isBattleMedicine ? \"Battle Medicine\" : \"Treat Wounds\";\n  const medicine = game.i18n.localize('PF2E.SkillMed');\n  const DCLabel = game.i18n.localize('PF2E.DCLabel');\n  ChatMessage.create({\n    user: game.user.id,\n    type: CHAT_MESSAGE_TYPES.ROLL,\n    roll: checkRoll,\n    flavor: `<strong>${healType}: ${medicine}</strong> (${DCLabel} ${DC})`,\n    speaker: ChatMessage.getSpeaker()\n  });\n  \n  const baseRoll = checkRoll.dice[0].total;\n  let godlessHealing, targetName, regularHealing;\n  let targetHasGodless=false;\n  const crit = baseRoll === 1  ?\n                 -1 :\n               baseRoll === 20 ?\n                 1 : 0;\n  const success = checkRoll.total >= DC + 10 ?\n                    2 :\n                  checkRoll.total >= DC      ?\n                    1 :\n                  checkRoll.total <= DC - 10 ?\n                   -1 : 0;\n\n  let healFormula, successLabel;\n  const bonusString = bonus > 0 ? `+ ${bonus}` : \"\";\n  if (success + crit > 1) {\n    healFormula = `4d8${bonusString}`;\n    successLabel = game.i18n.localize('PF2E.CheckOutcome.criticalSuccess');\n  } else if (success + crit === 1) {\n    healFormula = `2d8${bonusString}`;\n    successLabel = game.i18n.localize('PF2E.CheckOutcome.success');\n  } else if (success + crit < 0 || success == -1) {\n    healFormula = \"1d8\";\n    successLabel = game.i18n.localize('PF2E.CheckOutcome.criticalFailure');\n  }\n\n  if (healFormula !== undefined) {\n    const healRoll = new Roll(healFormula).roll();\n    const rollType = success > 0 ? \"Healing\" : \"Damage\";\n    game.user.targets.forEach(t => {\n      targetName=t.actor.data.name;\n      t.actor.data.items.forEach(i => {\n        targetHasGodless=false\n        if (i.name == \"Godless Healing\")\n          targetHasGodless=true\n      })\n      if (targetHasGodless == true)\n        if (godlessHealing === undefined)\n          godlessHealing=targetName;\n        else\n          godlessHealing=godlessHealing+\", \"+targetName;\n      else\n        if (regularHealing === undefined)\n          regularHealing=targetName;\n        else\n          regularHealing=regularHealing+\", \"+targetName;     \n    })\n    if (!autoApply)\n    {\n      ChatMessage.create({\n        user: game.user.id,\n        type: CHAT_MESSAGE_TYPES.ROLL,\n        flavor: `<strong>${rollType} Roll: ${healType} on ${regularHealing}</strong> (${successLabel})`,\n        roll: healRoll,\n        speaker: ChatMessage.getSpeaker()\n      }, { });   \n      if (godlessHealing && rollType===\"Healing\") {\n        let godlessHealRoll=healRoll\n        godlessHealRoll._formula=godlessHealRoll._formula+\"+5\"\n        godlessHealRoll.results[0]=parseInt(godlessHealRoll.results[0])+5\n        godlessHealRoll._total=parseInt(godlessHealRoll._total)+5\n        ChatMessage.create({\n          user: game.user.id,\n          type: CHAT_MESSAGE_TYPES.ROLL,\n          flavor: `<strong>${rollType} Roll: ${healType} with Godless Healing on ${godlessHealing}</strong> on (${successLabel})`,\n          roll: godlessHealRoll,\n          speaker: ChatMessage.getSpeaker()\n        }, { }); \n      }        \n    } else {\n      ChatMessage.create({\n        user: game.user.id,\n        type: CHAT_MESSAGE_TYPES.ROLL,\n        flavor: `<strong>${rollType} Roll: ${healType} on ${regularHealing}</strong> (${successLabel})`,\n        roll: healRoll,\n        speaker: ChatMessage.getSpeaker()\n      }, { });      \n      game.user.targets.forEach(t => {\n        targetName=t.actor.data.name;\n        t.actor.data.items.forEach(i => {\n          targetHasGodless=false\n          if (i.name == \"Godless Healing\")\n            targetHasGodless=true\n        })\n        if (autoApply)\n        {\n          console.log(t.actor.data.data.attributes)\n          let currHP = t.actor.data.data.attributes.hp.value\n          let maxHP = t.actor.data.data.attributes.hp.max\n          if (rollType==\"Healing\")\n          {\n            let totalHealed=healRoll._total\n            if (targetHasGodless == true) {\n              totalHealed+=5\n              if ((currHP+totalHealed) > maxHP)\n                totalHealed = maxHP-currHP\n              t.actor.modifyTokenAttribute(\"attributes.hp\", totalHealed, true, false);\n              healHurtMessage({value: totalHealed*-1,  healer: name,  target: targetName});\n            } else {\n              if ((currHP+totalHealed) > maxHP)\n                totalHealed = maxHP-currHP            \n              t.actor.modifyTokenAttribute(\"attributes.hp\", totalHealed, true, false);\n              healHurtMessage({value: totalHealed*-1,  healer: name,  target: targetName});\n            }\n          } else {\n            let totalDamage=healRoll._total\n              if ((currHP-totalDamage) <0)\n                totalDamage = currHP\n            t.actor.modifyTokenAttribute(\"attributes.hp\", totalDamage * -1, true, true);\n            healHurtMessage({value: totalDamage,  healer: name,  target: targetName});\n          }\n        }\n      })\n    }\n  }\n};\n\n\nconst applyChanges = ($html) => {\n  for (const token of canvas.tokens.controlled) {\n    const {med} = token.actor.data.data.skills;\n    const {name} = token;\n    const isBattleMedicine = $html.find('[name=\"battleMed\"]').is(':checked');\n    const autoApply = $html.find('[name=\"autoApply\"]').is(':checked');\n    const mod = parseInt($html.find('[name=\"modifier\"]').val()) || 0;\n    const requestedProf = parseInt($html.find('[name=\"dc-type\"]')[0].value) || 1;\n    const usedProf = requestedProf <= med.rank ? requestedProf : med.rank;\n    const roll = [\n      () => ui.notifications.warn(`${name} is not trained in Medicine and doesn't know how to treat wounds.`),\n      () => rollTreatWounds({DC: 15 + mod, bonus: 0, med, name, isBattleMedicine, autoApply}),\n      () => rollTreatWounds({DC: 20 + mod, bonus: 10, med, name, isBattleMedicine, autoApply}),\n      () => rollTreatWounds({DC: 30 + mod, bonus: 30, med, name, isBattleMedicine, autoApply}),\n      () => rollTreatWounds({DC: 40 + mod, bonus: 50, med, name, isBattleMedicine, autoApply})\n    ][usedProf];\n\n    roll();\n  }\n};\n\nif (token === undefined) {\n  ui.notifications.warn(game.i18n.localize('PF2E.UI.errorSelectToken'));\n} else if (Array.from(game.user.targets).length < 1) {\n  errorTargetToken\n  ui.notifications.warn(game.i18n.localize('PF2E.UI.errorTargetToken'));\n} else {\n  const medicine = game.i18n.localize('PF2E.SkillMed');\n  const DCLabel = game.i18n.localize('PF2E.DCLabel');  \n  const healing = game.i18n.localize('PF2E.TraitHealing');  \n  \n  const dialog = new Dialog({\n    title: \"Treat Wounds\",\n    content: `\n<div>Select a target DC. Remember that you can't attempt a heal above your proficiency. Attempting to do so will downgrade the DC and amount healed to the highest you're capable of.</div>\n<hr/>\n<form>\n<div class=\"form-group\">\n<label>${medicine} ${DCLabel}:</label>\n<select id=\"dc-type\" name=\"dc-type\">\n<option value=\"1\">${game.i18n.localize('PF2E.ProficiencyLevel1')} ${DCLabel} 15</option>\n<option value=\"2\">${game.i18n.localize('PF2E.ProficiencyLevel2')} ${DCLabel} 20, +10 ${healing}</option>\n<option value=\"3\">${game.i18n.localize('PF2E.ProficiencyLevel3')} ${DCLabel} 30, +30 ${healing}</option>\n<option value=\"4\">${game.i18n.localize('PF2E.ProficiencyLevel4')} ${DCLabel} 40, +50 ${healing}</option>\n</select>\n</div>\n<div class=\"form-group\">\n<label>${DCLabel} ${game.i18n.localize('ModifierTitle')}:</label>\n<input id=\"modifier\" name=\"modifier\" type=\"number\"/>\n</div>\n<div class=\"form-group\">\n<label>Is Battle Medicine?</label>\n<input id=\"battleMed\" name=\"battleMed\" type=\"checkbox\"/>\n</div>\n<div class=\"form-group\">\n<label>Automatically apply to selected targets?</label>\n<input id=\"autoApply\" name=\"autoApply\" type=\"checkbox\"/>\n</div>\n</form>\n`,\n    buttons: {\n      yes: {\n        icon: `<i class=\"fas fa-hand-holding-medical\"></i>`,\n        label: \"Treat Wounds\",\n        callback: applyChanges\n      },\n      no: {\n        icon: `<i class=\"fas fa-times\"></i>`,\n        label: \"Cancel\"\n      },\n    },\n    default: \"yes\"\n  });\n  dialog.render(true);\n}","author":"2FHUfmxigXEfscQX","img":"modules/zachros/icons/bandage.svg","actorIds":[]}
{"name":"Identify Items","permission":{"default":0,"2FHUfmxigXEfscQX":3},"type":"script","flags":{"core":{"sourceId":"Macro.MEhzg3FdrdaNWLUx"}},"scope":"global","command":"function runDialog(dialog, height, width) {\n    if (height) {\n        dialog.options.height = height;\n        dialog.position.height = height;\n    }\n    if (width) {\n        dialog.options.width = width;\n        dialog.position.width = width;\n    }\n    dialog.render(true);\n}\n\nfunction identifyItem(skill, dc, item) {\n    let skillValue, skillName;\n    switch (skill) {\n        case \"arc\":\n            skillValue = actor.data.data.skills.arc.value;\n            skillName = \"Arcana\";\n            break;\n        case \"rel\":\n            skillValue = actor.data.data.skills.rel.value;\n            skillName = \"Religion\";\n            break;\n        case \"occ\":\n            skillValue = actor.data.data.skills.occ.value;\n            skillName = \"Occultism\";\n            break;\n        case \"nat\":\n            skillValue = actor.data.data.skills.nat.value;\n            skillName = \"Nature\";\n            break;\n    }\n    const actorName=ChatMessage.getSpeaker({ actor: context.actor });\n    const roll = new Roll(`1d20 + ${skillValue}`, actor.getRollData()).roll();\n    roll.toMessage({\n        speaker: actorName,\n        flavor: `${actor.name} is trying to identify item <strong>${item.data.identification.identified.name}</strong> with <strong>${skillName}</strong> and the <strong>DC: ${dc}</strong>:`\n    }, {\n        rollMode: 'blindroll'\n    });\n}\n\nfunction showIDOptions(html) {\n    let magicItemID = html.find(\"#itemID\")[0].value;\n    const thisItem = (actor.data.items).filter(item => item._id === magicItemID);\n    const traits = thisItem[0].data.traits.value;\n    const itemLevel = thisItem[0].data.level.value;\n    const itemRarity = thisItem[0].data.traits.rarity.value;\n    let IDDC = 0;\n    let isArcane = false,\n        isDivine = false,\n        isPrimal = false,\n        isOccult = false,\n        isMagical = false,\n        isAlchemical = false;\n    if (traits.includes('magical'))\n        isMagical = true;\n    if (traits.includes('arcane'))\n        isArcane = true;\n    if (traits.includes('divine'))\n        isDivine = true;\n    if (traits.includes('occult'))\n        isOccult = true;\n    if (traits.includes('primal'))\n        isPrimal = true;\n    if (traits.includes('alchemical'))\n        isAlchemical = true;\n    if (itemRarity == \"uncommon\")\n        IDDC += 2\n    else if (itemRarity == \"rare\")\n        IDDC += 5\n    else if (itemRarity == \"unique\")\n        IDDC += 10\n    if (itemLevel == 0)\n        IDDC += 14;\n    if (itemLevel == 1)\n        IDDC += 15;\n    if (itemLevel == 2)\n        IDDC += 16;\n    if (itemLevel == 3)\n        IDDC += 18;\n    if (itemLevel == 4)\n        IDDC += 19;\n    if (itemLevel == 5)\n        IDDC += 20;\n    if (itemLevel == 6)\n        IDDC += 22;\n    if (itemLevel == 7)\n        IDDC += 23;\n    if (itemLevel == 8)\n        IDDC += 24;\n    if (itemLevel == 9)\n        IDDC += 26;\n    if (itemLevel == 10)\n        IDDC += 27;\n    if (itemLevel == 11)\n        IDDC += 28;\n    if (itemLevel == 12)\n        IDDC += 30;\n    if (itemLevel == 13)\n        IDDC += 31;\n    if (itemLevel == 14)\n        IDDC += 32;\n    if (itemLevel == 15)\n        IDDC += 34;\n    if (itemLevel == 16)\n        IDDC += 35;\n    if (itemLevel == 17)\n        IDDC += 36;\n    if (itemLevel == 18)\n        IDDC += 38;\n    if (itemLevel == 19)\n        IDDC += 39;\n    if (itemLevel == 20)\n        IDDC += 40;\n    if (itemLevel == 21)\n        IDDC += 42;\n    if (itemLevel == 22)\n        IDDC += 44;\n    if (itemLevel == 23)\n        IDDC += 46;\n    if (itemLevel == 24)\n        IDDC += 48;\n    if (itemLevel == 25)\n        IDDC += 50;\n\n    let content = \"\"\n    let arcaneDC, occultDC, primalDC, divineDC;\n    let d = {\n        title: \"Item Identification\",\n        content: \"\",\n        buttons: {},\n    }\n\n    if (isMagical) {\n        content += '<h1>Identify Magic Skills</h1>';\n        content += \"<table><tbody>\";\n        if (actor.data.data.skills.arc.rank) {\n            content += \"<tr><td>Arcana</td><td>\";\n            if (isArcane) {\n                content += \"Easy\";\n                arcaneDC = IDDC;\n            } else {\n                content += \"Standard\";\n                arcaneDC = IDDC + 5;\n            }\n            content += \"</td></tr>\";\n            let arcaneButton = {\n                buttons: {\n                    Arcana: {\n                        icon: \"<i class='fas fa-hat-wizard'></i>\",\n                        label: \"Use Arcana\",\n                        callback: (html) => identifyItem('arc', arcaneDC, thisItem[0]),\n                    },\n                }\n            }\n            mergeDeep(d, arcaneButton);\n        }\n        if (actor.data.data.skills.nat.rank) {\n            content += \"<tr><td>Nature</td><td>\";\n            if (isPrimal) {\n                content += \"Easy\";\n                primalDC = IDDC;\n            } else {\n                content += \"Standard\";\n                primalDC = IDDC + 5;\n            }\n            content += \"</td></tr>\";\n            let natureButton = {\n                buttons: {\n                    Nature: {\n                        icon: \"<i class='fas fa-leaf'></i>\",\n                        label: \"Use Nature\",\n                        callback: (html) => identifyItem('nat', primalDC, thisItem[0]),\n                    },\n                }\n            }\n            mergeDeep(d, natureButton);\n        }\n        if (actor.data.data.skills.occ.rank) {\n            content += \"<tr><td>Occult</td><td>\";\n            if (isOccult) {\n                content += \"Easy\";\n                occultDC = IDDC;\n            } else {\n                content += \"Standard\";\n                occultDC = IDDC + 5;\n            }\n            content += \"</td></tr>\";\n            let occultButton = {\n                buttons: {\n                    Occult: {\n                        icon: \"<i class='fas fa-magic'></i>\",\n                        label: \"Use Occultism\",\n                        callback: (html) => identifyItem('occ', occultDC, thisItem[0]),\n                    },\n                }\n            }\n            mergeDeep(d, occultButton);\n        }\n        if (actor.data.data.skills.rel.rank) {\n            content += \"<tr><td>Religion</td><td>\";\n            if (isDivine) {\n                content += \"Easy\";\n                divineDC = IDDC;\n            } else {\n                content += \"Standard\";\n                divineDC = IDDC + 5;\n            }\n            content += \"</td></tr>\";\n            let religionButton = {\n                buttons: {\n                    Religion: {\n                        icon: \"<i class='fas fa-cross'></i>\",\n                        label: \"Use Religion\",\n                        callback: (html) => identifyItem('rel', divineDC, thisItem[0]),\n                    },\n                }\n            }\n            mergeDeep(d, religionButton);\n        }\n        content += \"</tbody></table>\";\n    } else {\n        content += '<h1>Identify</h1>';\n        const alchemicalTools = (actor.data.items).filter(item => item.name.includes(\"Alchemist's Tools\"))\n        if (alchemicalTools.length > 0) {\n            content += \"<table><tbody>\";\n            content += \"<tr><td>Crafting</td><td>\";\n            content += \"Standard\";\n            arcaneDC = IDDC + 5;\n            content += \"</td></tr>\";\n            content += \"</tbody></table>\";\n            let craftButton = {\n                buttons: {\n                    Arcana: {\n                        icon: \"<i class='fas fa-hammer'></i>\",\n                        label: \"Use Crafting\",\n                        callback: (html) => identifyItem('arc', arcaneDC, thisItem[0]),\n                    },\n                }\n            }\n            mergeDeep(d, craftButton);\n        } else {\n            content += \"Unfortunately you do not have Alchemist's Tools and cannot identify this item.\";\n        }\n    }\n    let contentD = {\n        content: content,\n    }\n    mergeDeep(d, contentD)\n    let newD = new Dialog(d)\n    runDialog(newD, null, 600);\n}\n\nif (actor.data.type == \"character\") {\n    const allItems = (actor.data.items).filter(item => item.name.includes(\"Unidentified\"))\n    let content = `<div style=\"padding: 5px 0\"><label for=\"level\">What item are you identifying?</label>\n    <select name=\"itemID\" id=\"itemID\">`\n    for (let i = 0; i <= allItems.length - 1; i++)\n        content += `<option value=\"${allItems[i]._id}\">${allItems[i].name}</option>`\n\n    content += `</select></div></div>`\n\n    let d = new Dialog({\n        title: \"Item Identification\",\n        content: content,\n        buttons: {\n            Identify: {\n                icon: \"<i class='fas fa-magic'></i>\",\n                label: \"Identify Item\",\n                callback: (html) => showIDOptions(html),\n            }\n        },\n    })\n    runDialog(d, null, 300);\n}\n\n/**\n * Performs a deep merge of `source` into `target`.\n * Mutates `target` only but not its objects and arrays.\n *\n * @author inspired by [jhildenbiddle](https://stackoverflow.com/a/48218209).\n */\nfunction mergeDeep(target, source) {\n    const isObject = (obj) => obj && typeof obj === 'object';\n\n    if (!isObject(target) || !isObject(source)) {\n        return source;\n    }\n\n    Object.keys(source).forEach(key => {\n        const targetValue = target[key];\n        const sourceValue = source[key];\n\n        if (Array.isArray(targetValue) && Array.isArray(sourceValue)) {\n            target[key] = targetValue.concat(sourceValue);\n        } else if (isObject(targetValue) && isObject(sourceValue)) {\n            target[key] = mergeDeep(Object.assign({}, targetValue), sourceValue);\n        } else {\n            target[key] = sourceValue;\n        }\n    });\n\n    return target;\n}","author":"2FHUfmxigXEfscQX","img":"modules/zachros/icons/magnifier.svg","actorIds":[],"_id":"4adgwKdiMoJc2v5e"}